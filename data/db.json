{
  "users": [
    {
      "email": "larry@mail.ru",
      "password": "$2a$10$7hxk.YKlZTkLAJtjRvHDIul6JJLrPCjdt.T8v9Hl1eyl3wR6FxGTC",
      "firstname": "Larry",
      "lastname": "Page",
      "avatar": "https://blog.alexdevero.com/wp-content/uploads/2020/06/08-06-20-how-javascript-async-await-works-and-how-to-use-it-blog.jpg",
      "likes": [],
      "dislikes": [],
      "id": 1
    },
    {
      "email": "anvar@gmail.com",
      "password": "$2a$10$VcV/lIMetHWujG7gXH7qAudDk1kFgVDH7b0C5LnPIYRjBnke73haa",
      "firstname": "Anvar",
      "lastname": "Sobirov",
      "avatar": "https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-javascript-used-for.png",
      "likes": [],
      "dislikes": [],
      "id": 2
    }
  ],
  "posts": [
    {
      "title": "Async/Await in JS",
      "body": "An async function declaration creates an AsyncFunction object. Each time when an async function is called, it returns a new Promise which will be resolved with the value returned by the async function, or rejected with an exception uncaught within the async function. Async functions can contain zero or more await expressions. Await expressions make promise-returning functions behave as though they're synchronous by suspending execution until the returned promise is fulfilled or rejected. The resolved value of the promise is treated as the return value of the await expression. Use of async and await enables the use of ordinary try / catch blocks around asynchronous code.",
      "category": "Technology",
      "image": "https://dev-to-uploads.s3.amazonaws.com/i/34m9mus03v2zo9agn2bq.png",
      "date": "May 15 2024y 11:09",
      "likes": [
        {
          "user_id": 1,
          "user_firstname": "Larry",
          "user_lastname": "Page",
          "user_email": "larry@mail.ru",
          "user_avatar": "https://blog.alexdevero.com/wp-content/uploads/2020/06/08-06-20-how-javascript-async-await-works-and-how-to-use-it-blog.jpg"
        },
        {
          "user_id": 2,
          "user_firstname": "Anvar",
          "user_lastname": "Sobirov",
          "user_email": "anvar@gmail.com",
          "user_avatar": "https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-javascript-used-for.png"
        }
      ],
      "comments": [
        {
          "id": "e8018f72-2dc1-493c-acd7-0264859f1a3e",
          "body": "Good article !",
          "user_id": 2,
          "user_fullname": "Anvar Sobirov",
          "user_avatar": "https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-javascript-used-for.png",
          "replies": [
            {
              "id": "e7c7889c-cd91-4c3f-8728-d813564e16cf",
              "body": "Good !",
              "user_id": 1,
              "user_fullname": "Larry Page",
              "user_avatar": "https://blog.alexdevero.com/wp-content/uploads/2020/06/08-06-20-how-javascript-async-await-works-and-how-to-use-it-blog.jpg",
              "timestamp": 1715930434321
            }
          ],
          "likes": [
            {
              "id": "7267234a-6902-4ef1-a849-5a6be42adfe8",
              "user_firstname": "Larry",
              "user_lastname": "Page",
              "user_email": "larry@mail.ru",
              "user_avatar": "https://blog.alexdevero.com/wp-content/uploads/2020/06/08-06-20-how-javascript-async-await-works-and-how-to-use-it-blog.jpg",
              "user_id": 1
            }
          ],
          "dislikes": [],
          "timestamp": 1715930287925
        }
      ],
      "user_id": 1,
      "id": 1,
      "dislikes": []
    },
    {
      "title": "Event Loop in JS",
      "body": "JavaScript is undoubtedly one of the most popular programming languages today, powering the interactive elements of countless websites and web applications. Central to its asynchronous nature is the Event Loop, a concept that often mystifies beginners. In this blog post, we'll unravel the mysteries of the Event Loop in JavaScript, explaining what it is, how it works, and why it's crucial for building responsive and efficient applications.\n\nWhat is the Event Loop?\nAt its core, the Event Loop is a mechanism that allows JavaScript to perform non-blocking operations by handling asynchronous events. In simpler terms, it ensures that JavaScript remains responsive while executing multiple tasks simultaneously.\n\nHow Does the Event Loop Work?\nImagine the Event Loop as a never-ending cycle where JavaScript continuously checks for tasks to execute. Here's a breakdown of its key components:\n\nCall Stack: The Call Stack is where JavaScript keeps track of function calls. When you invoke a function, it gets added to the stack. As functions complete, they are removed from the stack.\n\nWeb APIs: JavaScript interacts with the browser's environment through Web APIs, which include features like timers, DOM manipulation, and AJAX requests.\n\nCallback Queue: Asynchronous operations, such as setTimeout or XMLHttpRequest, are handled by Web APIs. Once these operations are completed, their corresponding callback functions are pushed into the Callback Queue.",
      "category": "Technology",
      "image": "https://media.geeksforgeeks.org/wp-content/uploads/20200224050909/nodejs2.png",
      "date": "May 16 2024y 16:26",
      "likes": [
        {
          "user_id": 2,
          "user_firstname": "Anvar",
          "user_lastname": "Sobirov",
          "user_email": "anvar@gmail.com",
          "user_avatar": "https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-javascript-used-for.png"
        },
        {
          "user_id": 1,
          "user_firstname": "Larry",
          "user_lastname": "Page",
          "user_email": "larry@mail.ru",
          "user_avatar": "https://blog.alexdevero.com/wp-content/uploads/2020/06/08-06-20-how-javascript-async-await-works-and-how-to-use-it-blog.jpg"
        }
      ],
      "comments": [
        {
          "id": "f1522ee3-31b2-4c86-8bd5-340d67bb280b",
          "body": "dasdsd",
          "user_id": 2,
          "user_fullname": "Anvar Sobirov",
          "user_avatar": "https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-javascript-used-for.png",
          "replies": [],
          "likes": [],
          "dislikes": [
            {
              "id": "3239e052-65ca-4bdc-893f-004108abe4a5",
              "user_firstname": "Larry",
              "user_lastname": "Page",
              "user_email": "larry@mail.ru",
              "user_avatar": "https://blog.alexdevero.com/wp-content/uploads/2020/06/08-06-20-how-javascript-async-await-works-and-how-to-use-it-blog.jpg",
              "user_id": 1
            }
          ],
          "timestamp": 1715928488179
        },
        {
          "id": "dddc842d-eea1-4848-a50e-9a4af4e469b4",
          "body": "sadas",
          "user_id": 2,
          "user_fullname": "Anvar Sobirov",
          "user_avatar": "https://www.codecademy.com/resources/blog/wp-content/uploads/2022/12/what-is-javascript-used-for.png",
          "replies": [],
          "likes": [],
          "dislikes": [],
          "timestamp": 1715928496331
        }
      ],
      "user_id": 1,
      "id": 2,
      "dislikes": []
    }
  ]
}